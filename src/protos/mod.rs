// generated by protobuf_codegen
include!(concat!(env!("OUT_DIR"), "/protos/mod.rs"));

use crate::error::Error;

/// Represents a type that can be serialized as a message.
pub trait Serialize<M>
where
    M: protobuf::Message,
{
    /// Serializes as a message.
    fn serialize(&self) -> Result<M, Error>;
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn database_can_be_newed() {
        let db = database::Database::new();
        assert_eq!(db.vector_size, 0);
        assert_eq!(db.num_partitions, 0);
        assert_eq!(db.num_divisions, 0);
        assert_eq!(db.num_codes, 0);
        assert!(db.partition_refs.is_empty());
        assert!(db.codebook_refs.is_empty());
    }

    #[test]
    fn partition_can_be_newed() {
        let partition = database::Partition::new();
        assert_eq!(partition.vector_size, 0);
        assert_eq!(partition.num_divisions, 0);
        assert_eq!(partition.num_vectors, 0);
        assert!(partition.centroid.is_empty());
        assert!(partition.encoded_vectors.is_empty());
    }

    #[test]
    fn codebook_can_be_newed() {
        let codebook = database::Codebook::new();
        assert_eq!(codebook.vector_size, 0);
        assert_eq!(codebook.num_codes, 0);
        assert!(codebook.codes.is_empty());
    }
}
