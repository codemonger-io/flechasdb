// Database.

syntax = "proto3";

// Database.
message Database {
  // Number of elements in a vector.
  uint32 vector_size = 1;
  // Number of partitions in the database.
  uint32 num_partitions = 2; 
  // Number of subvector divisions. vector_size must be multiple of this.
  uint32 num_divisions = 3;
  // Number of codes in each codebook.
  uint32 num_codes = 4;

  // Reference IDs of the partitions.
  // Reference ID is supposed to be a URL-safe Base-64 encoded SHA-256 digest
  // of a serialized partition.
  // Number of elements must match num_partitions.
  repeated string partition_ids = 10;

  // Reference IDs of the partition centroids.
  // Reference ID is supposed to be a URL-safe Base-64 encoded SHA-256 digest
  // of the serialized partition centroids.
  string partition_centroids_id = 11;

  // Reference IDs of the codebooks.
  // Reference ID is supposed to be a URL-safe Base-64 encoded SHA-256 digest
  // of a serialized codebook.
  // Number of elements must match num_divisions.
  repeated string codebook_ids = 12;

  // Reference ID of the attributes log.
  // Reference ID is supposed to be a URL-safe Base-64 encoded SHA-256 digest
  // of a serialized attributes log.
  string attributes_log_id = 13;
}

// Single partition.
message Partition {
  // Vector size. Must match Database::vector_size.
  uint32 vector_size = 1;
  // Number of subvector divisions. Must match Database::num_divisions.
  uint32 num_divisions = 2;

  // Centroid of the partition.
  // Number of elements is given by vector_size.
  repeated float centroid = 10;

  // Encoded vectors.
  // Each vector must have num_divisions elements.
  EncodedVectorSet encoded_vectors = 11;

  // Vector IDs. Must be unique across the database.
  repeated Uuid vector_ids = 12;
}

// Codebook.
message Codebook {
  // Vector size. Must be Database::vector_size / Database::num_divisions.
  uint32 vector_size = 1;
  // Number of codes in the codebook. Must match Database::num_codes.
  uint32 num_codes = 2;

  // Codes. Number of elements is given by num_codes.
  repeated Vector codes = 10;
}

// Vector set.
message VectorSet {
  // Vector size. Must match vector_size of the container.
  uint32 vector_size = 1;

  // Elements of all the vectors.
  // i-th vector is given by:
  //   data[i * vector_size..(i + 1) * vector_size]
  repeated float data = 10;
}

// Encoded vector set.
message EncodedVectorSet {
  // Vector size. Must match vector_size of the container.
  uint32 vector_size = 1;

  // Elements of all the vectors.
  // i-th vector is given by:
  //   data[i * vector_size..(i + 1) * vector_size]
  repeated uint32 data = 10;
}

// Attribute value.
message AttributeValue {
  oneof value {
    string string_value = 1;
  }
}

// Log of attributes.
message AttributesLog {
  // Log entries.
  // AttributesLog contains only "set" operations.
  // If an attribute value is set multiple times, the last value is used.
  repeated OperationSetAttribute entries = 1;
}

// Operation to set an attribute.
message OperationSetAttribute {
  // Vector ID.
  Uuid vector_id = 1;
  // Name of the attribute to set.
  string name = 2;
  // Value of the attribute to set.
  AttributeValue value = 3;
}

// Vector.
message Vector {
  // Vector elements.
  // Number of elements must match vector_size of the container.
  repeated float elements = 1;
}

// UUID.
message Uuid {
  // Upper half of the ID; i.e., most significant 64 bits.
  fixed64 upper = 1;
  // Lower half of the ID; i.e., least significant 64 bits.
  fixed64 lower = 2;
}
