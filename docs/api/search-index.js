var searchIndex = JSON.parse('{\
"flechasdb":{"doc":"The core library of the FlechasDB system.","t":"AAAAAAAAAAAAAAAADDIIQDDLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLKLLLLLLFDIIIIIRDCCCLLLLLLALLKLKLKLKLKLLLLALLLLLLLLLLLDLLLLLLLLLLLNNNNNNDDEDNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLMMLLLLGEGNNLLALLLLLLLLLALALLLLLENDDNNNNNNNDDDEDNNNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLALLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLDRLLLLLLFLLLLGDNNNNIIIIRDEDNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLKLKLKLKLLLLLMLLMLLLLLLLLLLLLLLLMMLLLLLDLLLLLLLLLLLLENNNNNNLLLLLLLLLLLLLLLLDDIIQIQDDDLLLLLLLLLLLLKLKLLLLLLLLLLLLLLLLLKLKLLLLLLLLLLLLLLLLLLLKLLLLLLLLLEDINNNINNNLLLLMFFKLLLMLLLLLLLLLLFFFFFFFFFFFFFFFFFDILLLLLLLLLKLLLLLLIIIIIIKKKKKKDIDLLLLLMLLLLLLLLLLKMLLLLLLLLIIAKFKFDDDDDDDDMAMLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMMMMMMMLLLLLLLLLLMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMLLLLLLLLLLLLLLLLLLLLLLLLNNELLLLLLLLLLLLLLIKDDQILLLLLLLFLLLKLLLLLLKLLLLLALLLLLLLLLKLLLMLL","n":["asyncdb","db","distribution","error","io","kmeans","linalg","nbest","numbers","partitions","protos","slice","vector","io","proto","stored","AsyncZlibDecoder","CompressedHashedFileIn","FileSystem","HashedFileIn","HashedFileIn","LocalFileSystem","LocalHashedFileIn","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","from","from","from","from","into","into","into","into","into_inner","new","new","new","open_compressed_hashed_file","open_hashed_file","open_hashed_file","poll_read","poll_read","poll_read","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","verify","verify","verify","vzip","vzip","vzip","vzip","read_message","Database","LoadAttributesLog","LoadCodebook","LoadDatabase","LoadPartition","LoadPartitionCentroids","PROTOBUF_EXTENSION","Partition","Query","QueryEvent","QueryResult","borrow","borrow","borrow_mut","borrow_mut","from","from","get_attribute","into","into","load_attributes_log","load_attributes_log","load_codebook","load_codebook","load_database","load_database","load_partition","load_partition","load_partition_centroids","load_partition_centroids","num_codes","num_divisions","num_partitions","query","query","query_with_events","try_from","try_from","try_into","try_into","type_id","type_id","vector_size","vzip","vzip","GetAttributeInPartition","borrow","borrow_mut","from","into","into_future","poll","try_from","try_into","try_poll","type_id","vzip","FinishedKNNSelection","FinishedLoadingCodebooks","FinishedLoadingPartition","FinishedLoadingPartitionCentroids","FinishedPartitionQueryExecution","FinishedPartitionSelection","PartitionQueryResult","Query","QueryEvent","QueryResult","StartingKNNSelection","StartingLoadingCodebooks","StartingLoadingPartition","StartingLoadingPartitionCentroids","StartingPartitionQueryExecution","StartingPartitionSelection","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","fmt","fmt","from","from","from","from","get_attribute","into","into","into","into","into_future","new","partition_index","poll","squared_distance","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_poll","type_id","type_id","type_id","type_id","vector_id","vector_index","vzip","vzip","vzip","vzip","AttributeTable","AttributeValue","Attributes","String","Uint64","borrow","borrow_mut","build","clone","clone_into","eq","fmt","from","from","from","from","into","proto","serialize","stored","to_owned","try_from","try_into","type_id","vzip","BuildEvent","ClusterEvent","Database","DatabaseBuilder","FinishedIdAssignment","FinishedPartitionQuery","FinishedPartitionSelection","FinishedPartitioning","FinishedQuantization","FinishedResultSelection","FinishedSubvectorDivision","Partition","PartitionIter","PartitionQuery","QueryEvent","QueryResult","StartingIdAssignment","StartingPartitionQuery","StartingPartitionSelection","StartingPartitioning","StartingQuantization","StartingResultSelection","StartingSubvectorDivision","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","build_with_events","clone","clone_into","execute","fmt","fmt","fmt","from","from","from","from","from","from","from","from","get_attribute","into","into","into","into","into","into","into","into","into_iter","n_best_by_key","new","next","num_clusters","num_divisions","num_divisions","num_partitions","num_vectors","num_vectors","partition_index","partitions","proto","query","query_with_events","serialize","set_attribute_at","squared_distance","subvector_size","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vector_id","vector_ids","vector_index","vector_size","vector_size","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","with_clusters","with_divisions","with_partitions","DatabaseSerialize","PROTOBUF_EXTENSION","borrow","borrow_mut","deref","from","into","serialize","serialize_database","try_from","try_into","type_id","vzip","AttributeValueRef","Database","FinishedPartitionQuery","FinishedPartitionSelection","FinishedQueryInitialization","FinishedResultSelection","LoadCodebook","LoadDatabase","LoadPartition","LoadPartitionCentroids","PROTOBUF_EXTENSION","Partition","QueryEvent","QueryResult","StartingPartitionQuery","StartingPartitionSelection","StartingQueryInitialization","StartingResultSelection","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","fmt","from","from","from","from","get_attribute","get_attribute","get_codebook_id","get_encoded_vector","get_partition_id","get_vector_id","into","into","into","into","load_codebook","load_codebook","load_database","load_database","load_partition","load_partition","load_partition_centroids","load_partition_centroids","num_codes","num_divisions","num_partitions","num_vectors","partition_index","query","query_with_events","squared_distance","subvector_size","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vector_id","vector_index","vector_size","vzip","vzip","vzip","vzip","WeightedIndex","borrow","borrow_mut","from","get_weight","into","new","sample","try_from","try_into","type_id","update","vzip","Error","IOError","InvalidArgs","InvalidContext","InvalidData","ProtobufError","VerificationFailure","borrow","borrow_mut","fmt","fmt","from","from","from","from","from","into","provide","to_string","try_from","try_into","type_id","vzip","CompressedHashedFileIn","CompressedHashedFileOut","FileSystem","HashedFileIn","HashedFileIn","HashedFileOut","HashedFileOut","LocalFileSystem","LocalHashedFileIn","LocalHashedFileOut","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","create_compressed_hashed_file","create_compressed_hashed_file_in","create_hashed_file","create_hashed_file","create_hashed_file_in","create_hashed_file_in","flush","flush","from","from","from","from","from","into","into","into","into","into","new","new","new","open_compressed_hashed_file","open_hashed_file","open_hashed_file","persist","persist","persist","read","read","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","verify","verify","verify","vzip","vzip","vzip","vzip","vzip","write","write","ClusterEvent","Codebook","DefaultEpsilon","FinishedCentroidInitialization","FinishedCentroidReassignment","FinishedCentroidUpdate","Scalar","StartingCentroidInitialization","StartingCentroidReassignment","StartingCentroidUpdate","borrow","borrow","borrow_mut","borrow_mut","centroids","cluster","cluster_with_events","default_epsilon","fmt","from","from","indices","into","into","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","add_in","dot","dot_naive","max_abs","max_abs_naive","min","min_naive","norm2","norm2_naive","norm2_naive_check","scale_in","scale_in_naive","subtract","subtract_in","subtract_in_naive","sum","sum_naive","NBestByKey","TakeNBestByKey","borrow","borrow_mut","deref","deref_mut","from","into","into","into_iter","into_vec","n_best_by_key","new","push","try_from","try_into","type_id","vzip","Abs","FromAs","Infinity","One","Sqrt","Zero","abs","from_as","infinity","one","sqrt","zero","AllVectorIterator","Partitioning","Partitions","all_vectors","borrow","borrow","borrow_mut","borrow_mut","codebook","from","from","into","into","into_iter","n_best_by_key","new","next","num_partitions","partition","partition_with_events","residues","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","Deserialize","Serialize","database","deserialize","read_message","serialize","write_message","AttributeValue","AttributesLog","Database","EncodedVectorSet","OperationSetAttribute","Partition","Uuid","VectorSet","attribute_names","attribute_value","attributes_log_ids","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","centroid","clear","clear","clear","clear","clear","clear","clear","clear","clear_string_value","clear_uint64_value","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","codebook_ids","compute_size","compute_size","compute_size","compute_size","compute_size","compute_size","compute_size","compute_size","compute_size_dyn","compute_size_dyn","compute_size_dyn","compute_size_dyn","compute_size_dyn","compute_size_dyn","compute_size_dyn","compute_size_dyn","data","data","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default","default_instance","default_instance","default_instance","default_instance","default_instance","default_instance","default_instance","default_instance","descriptor","descriptor","descriptor","descriptor","descriptor","descriptor","descriptor","descriptor","descriptor_dyn","descriptor_dyn","descriptor_dyn","descriptor_dyn","descriptor_dyn","descriptor_dyn","descriptor_dyn","descriptor_dyn","deserialize","deserialize","deserialize","deserialize","encoded_vectors","entries","eq","eq","eq","eq","eq","eq","eq","eq","file_descriptor","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","has_string_value","has_uint64_value","into","into","into","into","into","into","into","into","is_initialized","is_initialized","is_initialized","is_initialized","is_initialized","is_initialized","is_initialized","is_initialized","is_initialized_dyn","is_initialized_dyn","is_initialized_dyn","is_initialized_dyn","is_initialized_dyn","is_initialized_dyn","is_initialized_dyn","is_initialized_dyn","lower","merge_from","merge_from","merge_from","merge_from","merge_from","merge_from","merge_from","merge_from","merge_from_dyn","merge_from_dyn","merge_from_dyn","merge_from_dyn","merge_from_dyn","merge_from_dyn","merge_from_dyn","merge_from_dyn","mut_special_fields","mut_special_fields","mut_special_fields","mut_special_fields","mut_special_fields","mut_special_fields","mut_special_fields","mut_special_fields","mut_special_fields_dyn","mut_special_fields_dyn","mut_special_fields_dyn","mut_special_fields_dyn","mut_special_fields_dyn","mut_special_fields_dyn","mut_special_fields_dyn","mut_special_fields_dyn","mut_string_value","name_index","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","new","num_codes","num_divisions","num_divisions","num_partitions","partition_centroids_id","partition_id","partition_ids","set_string_value","set_uint64_value","special_fields","special_fields","special_fields","special_fields","special_fields","special_fields","special_fields","special_fields","special_fields","special_fields","special_fields","special_fields","special_fields","special_fields","special_fields","special_fields","special_fields_dyn","special_fields_dyn","special_fields_dyn","special_fields_dyn","special_fields_dyn","special_fields_dyn","special_fields_dyn","special_fields_dyn","string_value","take_string_value","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","uint64_value","upper","value","value","vector_id","vector_ids","vector_size","vector_size","vector_size","vector_size","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","write_to_with_cached_sizes","write_to_with_cached_sizes","write_to_with_cached_sizes","write_to_with_cached_sizes","write_to_with_cached_sizes","write_to_with_cached_sizes","write_to_with_cached_sizes","write_to_with_cached_sizes","write_to_with_cached_sizes_dyn","write_to_with_cached_sizes_dyn","write_to_with_cached_sizes_dyn","write_to_with_cached_sizes_dyn","write_to_with_cached_sizes_dyn","write_to_with_cached_sizes_dyn","write_to_with_cached_sizes_dyn","write_to_with_cached_sizes_dyn","StringValue","Uint64Value","Value","borrow","borrow_mut","clone","clone_into","descriptor","eq","fmt","from","into","to_owned","try_from","try_into","type_id","vzip","AsSlice","as_slice","BlockVectorSet","SubVectorSet","Vector","VectorSet","borrow","borrow","borrow_mut","borrow_mut","chunk","clone","clone_into","divide_vector_set","fmt","from","from","get","get","get","get","get_mut","into","into","len","len","len","len","new","partition_with_events","proto","serialize","serialize","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vector_size","vector_size","vector_size","vector_size","vector_size","vzip","vzip"],"q":[[0,"flechasdb"],[13,"flechasdb::asyncdb"],[16,"flechasdb::asyncdb::io"],[68,"flechasdb::asyncdb::proto"],[69,"flechasdb::asyncdb::stored"],[114,"flechasdb::asyncdb::stored::get_attribute"],[126,"flechasdb::asyncdb::stored::query"],[189,"flechasdb::db"],[214,"flechasdb::db::build"],[338,"flechasdb::db::build::proto"],[351,"flechasdb::db::stored"],[434,"flechasdb::distribution"],[447,"flechasdb::error"],[470,"flechasdb::io"],[544,"flechasdb::kmeans"],[576,"flechasdb::linalg"],[593,"flechasdb::nbest"],[611,"flechasdb::numbers"],[623,"flechasdb::partitions"],[652,"flechasdb::protos"],[659,"flechasdb::protos::database"],[997,"flechasdb::protos::database::attribute_value"],[1014,"flechasdb::slice"],[1016,"flechasdb::vector"]],"d":["Asynchronous database.","Synchronous vector database.","More straightforward weighted distribution.","Common error type for flechasdb.","IO utilities.","k-means clustering.","Provides basic linear algebra operations.","N-best selection.","Provides traits for numbers.","Partitions.","Protocol Buffers representing the database.","Extension for slices.","Vectors.","Asynchronous file system.","Asynchronous utilities for Protocol Buffers.","Asynchronous stored database.","Zlib decoder that reads bytes from <code>AsyncRead</code>.","Compressed file whose contents can be verified with the …","Asynchronous file system.","File whose contents can be verified with the hash.","File whose contents can be verified with the hash.","Asynchronous local file system.","Local file whose name contents can be verified with the …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Consumes the decoder and returns the underlying reader.","Creates a local file system working under a given base …","Reads compressed data from a given <code>AsyncRead</code>.","Decompresses bytes from a given reader.","Opens a compressed file whose contents can be verified …","Opens a file whose contents can be verified with the hash.","","","","","","","","","","","","","","","","","Verifies the file contents.","","","","","","","Reads a message from a given <code>AsyncRead</code>.","Asynchronous database associated with an asynchronous file …","Capability of loading the attributes log of a partition.","Capability of loading a single codebook.","Capability of loading a database.","Capability of loading a single partition.","Capability of loading a partition centroids.","Extension for Protocol Buffers files.","Partition.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Asynchronous request for an attribute.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Loads the attributes log of a partition in the database.","","Loads a specified codebook of the database.","","Loads a database.","","Loads a specified partition of the database.","","Loads the partition centroids of the database.","","Returns the number of codes.","Returns the number of divisions.","Returns the number of partitions.","Query in a stored database.","Queries k-nearest neighbors of a given vector.","Queries k-nearest neighbors of a given vector.","","","","","","","Returns the vector size.","","","Asynchronous request for an attribute in a specific …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Finished selecting k-nearest neighbors (k-NN).","Finished loading all the codebooks.","Finished loading a single partition at a given index.","Finished loading all the partition centroids.","Finished running query on a single partition at a given …","Finished selecting partitions to query.","Result of a query in a single partition.","Future that asynchronously runs a query.","Event notified while querying.","Query result.","Starting to select k-nearest neighbors (k-NN).","Starting to load all the codebooks.","Starting to load a single partition at a given index.","Starting to load all the partition centroids.","Starting to run query on a single partition at a given …","Starting to select partitions to query.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns an attribue value of the vector corresponding to …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Creates a new query.","Index of the partition.","","Approximate squared distance from the query vector.","","","","","","","","","","","","","","","Unique ID of the vector.","Index of the vector in the partition.","","","","","Attribute table.","Attribute value.","Attributes associated with a vector.","String value.","64-bit unsigned integer value.","","","Database built on memory.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Protocol Buffers utilities for <code>db</code> module.","","Defines a stored database.","","","","","","Events from <code>DatabaseBuilder::build_with_events</code>.","Event from clustering.","Database.","Vector database builder.","Finished assigning unique IDs to individual vectors.","Finished to run a query on a specific partition.","Finished selecting partitions.","Finished partitioning vectors.","Finished to quantize subvectors in a specific division.","Finished selecting k-nearest neighbors.","Finished dividing vectors into subvectors.","Partition in a database.","Iterator of partitions in a database.","Query in a partition.","Database query event.","Query result.","Starting to assign unique IDs to individual vectors.","Starting to run a query on a specific partition.","Starting to select partitions.","Starting to partition vectors.","Starting to quantize subvectors in a specific division.","Starting to select k-nearest neighbors.","Starting to divide vectors into subvectors.","","","","","","","","","","","","","","","","","Builds the vector database.","Builds the vector database with an event handler.","","","Executes the query.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the attribute value of a given vector.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Initializes a builder for a given vector set.","","Returns the number of clusters.","Returns the number of subvector divisions.","Returns the number of subvector divisions.","Returns the number of partitions.","Returns the number of vectors in the database.","Returns the number of vectors.","Partition index.","Returns an iterator of partitions.","<code>Database</code> into Protocol Buffers data.","Queries k-nearest neighbors (k-NN) of a given vector.","Queries k-nearest neighbors (k-NN) of a given vector.","","Sets an attribute value for the i-th vector.","Approximate squared distance.","Returns the size of a subvector.","","","","","","","","","","","","","","","","","","","","","","","","","","Vector ID. Must be unique across the database.","Returns an iterator of vector IDs.","Vector index. Local index in the partition.","Returns the vector size.","Returns the vector size.","","","","","","","","","Sets the number of clusters for product quantization (PQ).","Sets the number of subvector divisions.","Sets the number of partitions.","Serializable form of <code>Database</code>.","Extension of a Protocol Buffers file.","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","Serializes <code>Database</code>.","","","","","Reference type of an attribute value.","Stored database.","Finished running a query on a specific partition.","Finished selecting partitions to query.","Finished initializing a query.","Finished selecting k-nearest neighbors.","Capability of loading a codebook.","Capability of loading a database.","Capability of loading a partition.","Capability of loading partition centroids.","Extension of a Protocol Buffers file.","Partition.","Events emitted while querying.","Query result.","Starting to run a query on a specific partition.","Starting to select partitions to query.","Starting to initialize a query.","Starting to select k-nearest neighbors.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns an attribute value of a given vector.","Returns an attribute value of the vector corresponding to …","Returns a code vector in a specified division.","Returns a specified encoded vector.","Returns the ID of a partition.","Returns the ID of a specified vector.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Loads a codebook at a given index.","Loads a codebook.","Loads a database.","Loads a database.","Loads a partition at a given index.","Loads a partition.","Loads partition centroids.","","Returns the number of codes in each codebook.","Returns the number of subvector divisions.","Returns the number of partitions.","Returns the number of vectors in the partition.","Partition index.","Queries k-nearest neighbors (k-NN) of a given vector.","Queries k-nearest neighbors (k-NN) of a given vector.","Approximate squared distance.","Returns the subvector size.","","","","","","","","","","","","","","","Vector ID. Must be unique across the entire database.","Vector index. Local index in the partition.","Returns the vector size.","","","","","Straightforward weighted distribution.","","","Returns the argument unchanged.","Returns the weight.","Calls <code>U::from(self)</code>.","Creates a new <code>WeightedIndex</code> from a given <code>Vec</code>.","Samples a value from the distribution.","","","","Updates the weights.","","Common error type for flechasdb.","I/O error.","Invalid arguments.","Invalid context.","Invalid data.","Error on <code>protobuf</code>.","Verification has failed.","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","Compressed file whose contents can be verified with a hash.","Compressed file that calculates the hash of its contents.","Abstracts a file system.","File whose name is the hash of its contents.","File whose contents can be verified with the hash.","File whose name will be the hash of its contents.","File that calculates the hash of its contents.","File system uses the local file system.","Readable file in the local file system.","Writable file in the local file system.","","","","","","","","","","","Creates a compressed file that calculates the hash of its …","Creates a compressed hashed file in a given directory.","Creates a file that calculates the hash of its contents.","","Creates a hashed file in a given directory.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Writes compressed data to a given <code>Write</code>.","Reads compressed data from a given <code>Read</code>.","Creates a local file system working under a given base …","Opens a compressed file whose contents can be verified …","Opens a file whose contents can be verified with a hash.","","Persists the file.","","","","","","","","","","","","","","","","","","","","Verifies the file.","","","","","","","","","","Event notified while clustering.","Codebook.","Default epsilon value.","Finished centroid initialization.","Finished n-th centroid reassignment.","Finished n-th centroid udpate.","Requirements for a vector element as a scalar value.","Starting centroid initialization.","Starting n-th centroid reassignment.","Starting n-th centroid update.","","","","","Cluster centroids.","Performs k-means clustering.","Performs k-means clustering.","Returns the default espsilon value.","","Returns the argument unchanged.","Returns the argument unchanged.","Cluster (centroid) indices assigned to input vectors.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Adds a vector to another vector in place.","Calculates the dot (inner) product of given two vectors.","Calculates the dot (inner) product of given two vectors.","Locates the maximum absoulte value in a given vector.","Locates the maximum absolute value in a given vector.","Locates the minimum value in a given vector.","Locates the minimum value in a given vector.","Calculates the Euclidean norm of a given vector.","Calculates the Euclidean norm of a given vector.","Calculates the Euclidean norm of a given vector.","Multiplies a scalar value to a given vector in place.","Multiplies a scalar value to a given vector in place.","Subtracts a vector from another vector.","Subtracts a vector from another vector in place.","Subtracts a vector from another vector in place.","Sums all the elements in a give vector.","Sums all the elements in a given vector.","N-best elements.","Trait to select n-best elements in a collection.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","Consumes the <code>NBestByKey</code> and returns the underlying vector.","Selects n-best elements in the iterator.","Creates a new <code>NBestByKey</code>.","Pushes a new candidate to the n-best.","","","","","Represents a number that can return an absolute value.","Represents a number converted from another primitive type.","Represents a number that has positive infinity.","Represents a number that has one.","Represents a number that can calculate a square root.","Represents a number that has zero.","Returns the absolute value.","Returns the converted number.","Returns positive infinity.","Returns one.","Returns the square root.","Returns zero.","Iterator of all the input vectors in partitions.","Implementation of partitioning in place.","Partitions.","Returns an iterator of all the input vectors.","","","","","Codebook of the partition.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Starts iteration of all vectors in given partitions.","","Returns the number of partitions.","Partitions the vector set in place.","Partitions the vector set in place.","Residue vector set.","","","","","","","","","Represents a type that can be deserialized from a message.","Represents a type that can be serialized as a message.","Generated file from <code>database.proto</code>","Deserializes the message.","Reads a message from a given input stream.","Serializes as a message.","Writes a given message to a given output stream.","","","","","","","","","","Nested message and enums of message <code>AttributeValue</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>FileDescriptor</code> object which allows dynamic access to files","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Represents a type that can be referenced as a slice.","Returns a reference to the underlying slice.","Vectors in a contiguous array.","Subvectors of another vector set.","Vector type.","Set of vectors of the same size.","","","","","Tries to chunk a given <code>Vec</code>.","","","Divides a given vector set into subvector sets.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the i-th vector.","","","Returns the i-th vector in the vector set.","Returns the mutable i-th vector.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the number of vectors in the set.","","Returns the number of vectors in the vector set.","","Creates a <code>SubVectorSet</code> of a given <code>VectorSet</code>.","","Protocol Buffers utilities for <code>vector</code>.","","","","","","","","","","Returns the size of each vector.","","","Returns the size of each vector in the vector set.","Vector size.","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,0,4,6,18,1,4,6,18,1,4,6,18,1,4,6,18,1,1,4,6,1,27,27,4,6,18,1,4,6,18,1,4,6,18,1,4,6,18,1,21,6,18,4,6,18,1,0,0,0,0,0,0,0,0,0,0,0,0,28,126,28,126,28,126,0,28,126,127,28,128,28,129,28,130,28,131,28,28,28,28,0,28,28,28,126,28,126,28,126,28,28,126,0,36,36,36,36,36,36,36,36,36,36,36,43,43,43,43,43,43,0,0,0,0,43,43,43,43,43,43,39,33,38,43,39,33,38,43,38,38,39,38,43,39,33,38,43,39,39,33,38,43,33,33,38,33,38,38,39,33,38,43,39,33,38,43,33,39,33,38,43,38,38,39,33,38,43,0,0,0,45,45,45,45,0,45,45,45,45,45,45,45,45,45,0,45,0,45,45,45,45,45,0,57,0,0,57,58,58,57,57,58,57,0,0,0,0,0,57,58,58,57,57,58,57,52,53,63,64,55,57,58,54,52,53,63,64,55,57,58,54,52,52,54,54,55,57,58,54,52,53,63,64,55,57,58,54,53,52,53,63,64,55,57,58,54,63,63,52,63,53,53,64,53,53,64,54,53,0,53,53,64,53,54,53,54,52,53,63,64,55,57,58,54,52,53,63,64,55,57,58,54,52,53,63,64,55,57,58,54,54,53,54,53,64,52,53,63,64,55,57,58,54,52,52,52,0,0,67,67,67,67,67,67,0,67,67,67,67,0,0,72,72,72,72,0,0,0,0,0,0,0,0,72,72,72,72,73,70,72,71,73,70,72,71,70,71,70,71,72,73,70,72,71,73,71,73,70,73,70,73,70,72,71,132,73,133,73,134,73,135,73,73,73,73,70,71,73,73,71,73,70,71,73,70,72,71,73,70,72,71,73,70,72,71,71,71,73,73,70,72,71,0,83,83,83,83,83,83,83,83,83,83,83,83,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,0,0,0,69,0,69,0,0,0,90,95,91,93,98,90,95,91,93,98,69,69,69,91,69,91,90,93,90,95,91,93,98,90,95,91,93,98,90,95,91,69,69,91,96,90,93,95,98,90,95,91,93,98,90,95,91,93,98,90,95,91,93,98,99,95,98,90,95,91,93,98,90,93,0,0,0,101,101,101,0,101,101,101,100,101,100,101,100,0,0,136,101,100,101,100,100,101,100,101,100,101,100,101,100,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,62,62,62,62,62,62,62,62,137,62,62,62,62,62,62,0,0,0,0,0,0,103,138,139,104,105,79,0,0,0,110,110,111,110,111,110,110,111,110,111,111,111,111,111,110,51,51,110,110,111,110,111,110,111,110,111,0,0,0,140,0,141,0,0,0,0,0,0,0,0,0,68,0,68,68,65,112,113,49,114,115,116,68,65,112,113,49,114,115,116,65,68,65,112,113,49,114,115,116,49,49,68,65,112,113,49,114,115,116,68,65,112,113,49,114,115,116,68,68,65,112,113,49,114,115,116,68,65,112,113,49,114,115,116,112,113,68,68,65,65,112,112,113,113,49,49,114,114,115,115,116,116,68,65,112,113,49,114,115,116,68,65,112,113,49,114,115,116,68,65,112,113,49,114,115,116,112,113,49,116,65,114,68,65,112,113,49,114,115,116,0,68,68,65,65,112,112,113,113,49,49,114,114,115,115,116,116,68,65,112,113,49,114,115,116,49,49,68,65,112,113,49,114,115,116,68,65,112,113,49,114,115,116,68,65,112,113,49,114,115,116,116,68,65,112,113,49,114,115,116,68,65,112,113,49,114,115,116,68,65,112,113,49,114,115,116,68,65,112,113,49,114,115,116,49,115,68,68,65,65,112,112,113,113,49,49,114,114,115,115,116,116,68,68,65,68,68,114,68,49,49,68,65,112,113,49,114,115,116,68,65,112,113,49,114,115,116,68,65,112,113,49,114,115,116,49,49,68,65,112,113,49,114,115,116,68,65,112,113,49,114,115,116,68,65,112,113,49,114,115,116,68,65,112,113,49,114,115,116,68,65,112,113,49,114,115,116,49,116,49,115,115,65,68,65,112,113,68,65,112,113,49,114,115,116,68,65,112,113,49,114,115,116,68,65,112,113,49,114,115,116,123,123,0,123,123,123,123,123,123,123,123,123,123,123,123,123,123,0,30,0,0,50,0,125,77,125,77,77,77,77,0,77,125,77,50,125,77,77,77,125,77,50,125,77,77,125,77,0,77,77,77,125,77,125,77,125,77,50,125,77,77,77,125,77],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[1],[[[3,[2]]],4],[5,[[6,[5]]]],[[],1],[[7,[0,[[9,[8]],10]]],[[13,[[12,[11]]]]]],[[[0,[[9,[8]],10]]],[[13,[[12,[11]]]]]],[[4,[0,[[9,[8]],10]]],[[13,[[12,[11]]]]]],[[[13,[[6,[5]]]],14,15],[[17,[16]]]],[[[13,[18]],14,15],[[17,[16]]]],[[[13,[[1,[5]]]],14,15],[[17,[16]]]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],[[13,[[12,[11]]]]]],[[[6,[21]]],[[13,[[12,[11]]]]]],[18,[[13,[[12,[11]]]]]],[[]],[[]],[[]],[[]],[[[0,[5,22,23]]],[[19,[24,25]]]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[[]],[[]],[26,[[13,[[12,[11]]]]]],[[[28,[[0,[10,7]],[0,[27,10,7]]]],26],[[13,[[12,[11]]]]]],[26,[[13,[[12,[11]]]]]],[[[28,[29,[0,[27,10,7]]]],26],[[13,[[12,[11]]]]]],[[10,[0,[[9,[8]],10]]],[[13,[[12,[11]]]]]],[[[0,[27,10,7]],[0,[[9,[8]],10]]],[[13,[[12,[11]]]]]],[26,[[13,[[12,[11]]]]]],[[[28,[29,[0,[27,10,7]]]],26],[[13,[[12,[11]]]]]],[[],[[13,[[12,[11]]]]]],[[[28,[29,[0,[27,10,7]]]]],[[13,[[12,[11]]]]]],[[[28,[10,10]]],26],[[[28,[10,10]]],26],[[[28,[10,10]]],26],0,[[[28,[10,10]],[0,[[30,[10]],10,23]],31,31],[[33,[10,10,[0,[[30,[10]],10,23]],32]]]],[[[28,[10,10]],[0,[[30,[10]],10,23]],31,31,32],[[33,[10,10,[0,[[30,[10]],10,23]],32]]]],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[[28,[10,10]]],26],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[[13,[[36,[10,10,[0,[34,35,23]]]]]],14],17],[[],19],[[],19],[[13,14],17],[[],20],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[38,[37]]],[[38,[37]]]],[[]],[[[39,[10,10]]]],[[[38,[40]],41],42],[[43,41],42],[[]],[[]],[[]],[[]],[[[39,[10,10]],[0,[34,35,10,23]]],[[36,[10,10,[0,[34,35,10,23]]]]]],[[]],[[]],[[]],[[]],[[]],[[[28,[10,10]],[0,[10,23]],31,31],[[33,[10,10,[0,[10,23]]]]]],0,[[[13,[[33,[[0,[44,10]],10,[0,[[30,[[0,[44,10]]]],10,23]],32]]]],14],17],0,[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[13,14],17],[[],20],[[],20],[[],20],[[],20],0,0,[[]],[[]],[[]],[[]],0,0,0,0,0,[[]],[[]],0,[45,45],[[]],[[45,45],46],[[45,41],42],[8,45],[47,45],[48,45],[[]],[[]],0,[45,[[19,[49,25]]]],0,[[]],[[],19],[[],19],[[],20],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[52,[44,[0,[[50,[44]],[51,[44,[0,[[50,[44]],[51,[44,[0,[[50,[44]],[51,[44,[0,[50,51]]]]]]]]]]]]]]]]],[[19,[[53,[44,[0,[[50,[44]],[51,[44,[0,[[50,[44]],[51,[44,[0,[[50,[44]],[51,[44,[0,[50,51]]]]]]]]]]]]]]]],25]]]],[[[52,[44,[0,[[50,[44]],[51,[44,[0,[[50,[44]],[51,[44,[0,[[50,[44]],[51,[44,[0,[50,51]]]]]]]]]]]]]]]],32],[[19,[[53,[44,[0,[[50,[44]],[51,[44,[0,[[50,[44]],[51,[44,[0,[[50,[44]],[51,[44,[0,[50,51]]]]]]]]]]]]]]]],25]]]],[[[54,[37]]],[[54,[37]]]],[[]],[[[55,[44,[50,[44]]]]],[[19,[[56,[[54,[44]]]],25]]]],[[[57,[40]],41],42],[[58,41],42],[[[54,[40]],41],42],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[53,[50]],59,[0,[34,35,23]]],[[19,[[60,[45]],25]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[26,32],[[62,[[61,[[61,[[61,[61]]]]]],32]]]],[[[0,[[50,[44]],[51,[44,[0,[[50,[44]],[51,[44,[0,[[50,[44]],[51,[44,[0,[[50,[44]],[51,[44,[0,[50,51]]]]]]]]]]]]]]]]]]],[[52,[44,[0,[[50,[44]],[51,[44,[0,[[50,[44]],[51,[44,[0,[[50,[44]],[51,[44,[0,[50,51]]]]]]]]]]]]]]]]]],[[[63,[37,[50,[37]]]]],60],[[[53,[50]]],26],[[[53,[50]]],26],[64,26],[[[53,[50]]],26],[[[53,[50]]],26],[64,26],0,[[[53,[50]]],[[63,[50]]]],0,[[[53,[44,[50,[44]]]],[0,[[30,[44]],23]],31,31],[[19,[[56,[[54,[44]]]],25]]]],[[[53,[44,[50,[44]]]],[0,[[30,[44]],23]],31,31,32],[[19,[[56,[[54,[44]]]],25]]]],[[[64,[29]]],[[19,[65,25]]]],[[[53,[50]],26,9],[[19,[25]]]],0,[[[53,[50]]],26],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],0,[[[53,[50]]],66],0,[[[53,[50]]],26],[64,26],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[52,[44,[0,[[50,[44]],[51,[44,[0,[[50,[44]],[51,[44,[0,[[50,[44]],[51,[44,[0,[50,51]]]]]]]]]]]]]]]],31],[[52,[44,[0,[[50,[44]],[51,[44,[0,[[50,[44]],[51,[44,[0,[[50,[44]],[51,[44,[0,[50,51]]]]]]]]]]]]]]]]]],[[[52,[44,[0,[[50,[44]],[51,[44,[0,[[50,[44]],[51,[44,[0,[[50,[44]],[51,[44,[0,[50,51]]]]]]]]]]]]]]]],31],[[52,[44,[0,[[50,[44]],[51,[44,[0,[[50,[44]],[51,[44,[0,[[50,[44]],[51,[44,[0,[50,51]]]]]]]]]]]]]]]]]],[[[52,[44,[0,[[50,[44]],[51,[44,[0,[[50,[44]],[51,[44,[0,[[50,[44]],[51,[44,[0,[50,51]]]]]]]]]]]]]]]],31],[[52,[44,[0,[[50,[44]],[51,[44,[0,[[50,[44]],[51,[44,[0,[[50,[44]],[51,[44,[0,[50,51]]]]]]]]]]]]]]]]]],0,0,[[]],[[]],[[[67,[50]]]],[[]],[[]],[[[67,[29,[50,[29]]]]],[[19,[68,25]]]],[[[53,[37,[50,[37]]]],69],[[19,[25]]]],[[],19],[[],19],[[],20],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[70,[37]]],[[70,[37]]]],[[[71,[37,37]]],[[71,[37,37]]]],[[]],[[]],[[72,41],42],[[]],[[]],[[]],[[]],[[[73,[69]],59,[0,[34,35,23]]],[[19,[[60,[74]],25]]]],[[[71,[44,69]],[0,[34,35,23]]],[[19,[[60,[74]],25]]]],[[[73,[69]],26],[[60,[8]]]],[[70,26],[[60,[[76,[75]]]]]],[[[73,[69]],26],[[60,[8]]]],[[70,26],[[60,[59]]]],[[]],[[]],[[]],[[]],[26,[[19,[77,25]]]],[[[73,[29,69,69]],26],[[19,[[77,[29]],25]]]],[[[3,[48]]],[[19,[73,25]]]],[[69,[3,[48]]],[[19,[[73,[29,69]],25]]]],[26,[[19,[70,25]]]],[[[73,[29,69]],26],[[19,[[70,[29]],25]]]],[[],[[19,[77,25]]]],[[[73,[29,69]]],[[19,[[77,[29]],25]]]],[[[73,[69]]],26],[[[73,[69]]],26],[[[73,[69]]],26],[70,26],0,[[[73,[44,69]],[0,[[30,[44]],23]],31,31],[[19,[[56,[[71,[44,69]]]],25]]]],[[[73,[44,69]],[0,[[30,[44]],23]],31,31,32],[[19,[[56,[[71,[44,69]]]],25]]]],0,[[[73,[69]]],26],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],0,0,[[[73,[69]]],26],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[[83,[[0,[78,79,80,81,61,82]]]],26],[[0,[78,79,80,81,61,82]]]],[[]],[[[56,[[0,[78,79,80,81,61,82]]]]],[[19,[[83,[[0,[78,79,80,81,61,82]]]],25]]]],[[[83,[[0,[78,79,80,61,82]]]],[0,[84,23]]],26],[[],19],[[],19],[[],20],[[[83,[[0,[78,79,80,81,61,82]]]],76],[[19,[25]]]],[[]],0,0,0,0,0,0,0,[[]],[[]],[[25,41],42],[[25,41],42],[85,25],[[]],[86,25],[87,25],[88,25],[[]],[89],[[],8],[[],19],[[],19],[[],20],[[]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[19,[90,25]]]],[[[3,[48]]],[[19,[90,25]]]],[[],[[19,[25]]]],[91,[[19,[25]]]],[[[3,[48]]],[[19,[25]]]],[[91,[3,[48]]],[[19,[25]]]],[[[90,[92]]],16],[93,16],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[92,[[90,[92]]]],[94,[[95,[94]]]],[[[3,[2]]],91],[[[3,[48]]],[[19,[95,25]]]],[[[3,[48]]],[[19,[25]]]],[[91,[3,[48]]],[[19,[25]]]],[[[3,[48]]],[[19,[8,25]]]],[[[90,[96]],[3,[48]]],[[19,[8,25]]]],[[93,[3,[48]]],[[19,[8,25]]]],[[[95,[94]],[76,[97]]],[[16,[26]]]],[[98,[76,[97]]],[[16,[26]]]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[[],[[19,[25]]]],[[[95,[99]]],[[19,[25]]]],[98,[[19,[25]]]],[[]],[[]],[[]],[[]],[[]],[[[90,[92]],[76,[97]]],[[16,[26]]]],[[93,[76,[97]]],[[16,[26]]]],0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],0,[[[50,[44]],31],[[19,[[100,[44]],25]]]],[[[50,[44]],31,32],[[19,[[100,[44]],25]]]],[[]],[[[101,[40]],41],42],[[]],[[]],0,[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[]],[[]],[[[76,[[0,[80,82]]]],[76,[[0,[80,82]]]]]],[[[76,[[0,[79,80,102,82]]]],[76,[[0,[79,80,102,82]]]]],[[0,[79,80,102,82]]]],[[[76,[[0,[79,80,102,82]]]],[76,[[0,[79,80,102,82]]]]],[[0,[79,80,102,82]]]],[[[76,[[0,[103,61,82]]]]],[[60,[[0,[103,61,82]]]]]],[[[76,[[0,[103,61,82]]]]],[[60,[[0,[103,61,82]]]]]],[[[76,[[0,[61,82]]]]],[[60,[[0,[61,82]]]]]],[[[76,[[0,[61,82]]]]],[[60,[[0,[61,82]]]]]],[[[76,[[0,[103,104,105,79,80,106,102,61,107,82]]]]],[[0,[103,104,105,79,80,106,102,61,107,82]]]],[[[76,[[0,[105,79,80,102,82]]]]],[[0,[105,79,80,102,82]]]],[[[76,[[0,[103,104,105,79,80,106,102,61,107,82]]]]],[[0,[103,104,105,79,80,106,102,61,107,82]]]],[[[76,[[0,[108,82]]]],[0,[108,82]]]],[[[76,[[0,[108,82]]]],[0,[108,82]]]],[[[76,[[0,[109,82]]]],[76,[[0,[109,82]]]],[76,[[0,[109,82]]]]]],[[[76,[[0,[81,82]]]],[76,[[0,[81,82]]]]]],[[[76,[[0,[81,82]]]],[76,[[0,[81,82]]]]]],[[[76,[[0,[79,80,82]]]]],[[0,[79,80,82]]]],[[[76,[[0,[79,80,82]]]]],[[0,[79,80,82]]]],0,0,[[]],[[]],[[[62,[32]]]],[[[62,[32]]]],[[]],[[]],[[[62,[32]]],56],[[[62,[32]]]],[[[62,[32]]],56],[[26,32],[[62,[61,32]]]],[[26,32],[[62,[32]]]],[[[62,[61,32]]],60],[[],19],[[],19],[[],20],[[]],0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,[[[110,[44,[50,[44]]]]],[[111,[44,[50,[44]]]]]],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],[[]],[[26,32],[[62,[[61,[[61,[[61,[61]]]]]],32]]]],[[[110,[44,[50,[44]]]]],[[111,[44,[50,[44]]]]]],[[[111,[44,[50,[44]]]]],60],[[[110,[44,[50,[44]]]]],26],[31,[[19,[110,25]]]],[[31,32],[[19,[110,25]]]],0,[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[]],[[]],0,0,0,[[],[[19,[25]]]],[94,[[19,[24,25]]]],[[],[[19,[25]]]],[[24,92],[[19,[25]]]],0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[68],[65],[112],[113],[49],[114],[115],[116],[49],[49],[68,68],[65,65],[112,112],[113,113],[49,49],[114,114],[115,115],[116,116],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[68,47],[65,47],[112,47],[113,47],[49,47],[114,47],[115,47],[116,47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],0,0,[[],68],[[],68],[[],65],[[],65],[[],112],[[],112],[[],113],[[],113],[[],49],[[],49],[[],114],[[],114],[[],115],[[],115],[[],116],[[],116],[[],68],[[],65],[[],112],[[],113],[[],49],[[],114],[[],115],[[],116],[[],117],[[],117],[[],117],[[],117],[[],117],[[],117],[[],117],[[],117],[[],117],[[],117],[[],117],[[],117],[[],117],[[],117],[[],117],[[],117],[112,[[19,[[77,[29]],25]]]],[113,[[19,[[77,[75]],25]]]],[49,[[19,[45,25]]]],[116,[[19,[59,25]]]],0,0,[[68,68],46],[[65,65],46],[[112,112],46],[[113,113],46],[[49,49],46],[[114,114],46],[[115,115],46],[[116,116],46],[[],118],[[68,41],42],[[68,41],42],[[65,41],42],[[65,41],42],[[112,41],42],[[112,41],42],[[113,41],42],[[113,41],42],[[49,41],42],[[49,41],42],[[114,41],42],[[114,41],42],[[115,41],42],[[115,41],42],[[116,41],42],[[116,41],42],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[49,46],[49,46],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[68,46],[65,46],[112,46],[113,46],[49,46],[114,46],[115,46],[116,46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],[[],46],0,[[68,119],120],[[65,119],120],[[112,119],120],[[113,119],120],[[49,119],120],[[114,119],120],[[115,119],120],[[116,119],120],[119,[[19,[87]]]],[119,[[19,[87]]]],[119,[[19,[87]]]],[119,[[19,[87]]]],[119,[[19,[87]]]],[119,[[19,[87]]]],[119,[[19,[87]]]],[119,[[19,[87]]]],[68,121],[65,121],[112,121],[113,121],[49,121],[114,121],[115,121],[116,121],[[],121],[[],121],[[],121],[[],121],[[],121],[[],121],[[],121],[[],121],[49,8],0,[[],68],[[],68],[[],65],[[],65],[[],112],[[],112],[[],113],[[],113],[[],49],[[],49],[[],114],[[],114],[[],115],[[],115],[[],116],[[],116],0,0,0,0,0,0,0,[[49,8]],[[49,47]],[68,121],[65,121],[112,121],[113,121],[49,121],[114,121],[115,121],[116,121],0,0,0,0,0,0,0,0,[[],121],[[],121],[[],121],[[],121],[[],121],[[],121],[[],121],[[],121],[49,48],[49,8],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[49,47],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[68,122],120],[[65,122],120],[[112,122],120],[[113,122],120],[[49,122],120],[[114,122],120],[[115,122],120],[[116,122],120],[122,[[19,[87]]]],[122,[[19,[87]]]],[122,[[19,[87]]]],[122,[[19,[87]]]],[122,[[19,[87]]]],[122,[[19,[87]]]],[122,[[19,[87]]]],[122,[[19,[87]]]],0,0,0,[[]],[[]],[123,123],[[]],[[],124],[[123,123],46],[[123,41],42],[[]],[[]],[[]],[[],19],[[],19],[[],20],[[]],0,[[],76],0,0,0,0,[[]],[[]],[[]],[[]],[[56,31],[[19,[77,25]]]],[[[77,[37]]],[[77,[37]]]],[[]],[[50,31],[[19,[[56,[[125,[50]]]],25]]]],[[[77,[40]],41],42],[[]],[[]],[26],[[[125,[50]],26]],[[77,26]],[[77,26],76],[[77,26],76],[[]],[[]],[[],26],[[[125,[50]]],26],[77,26],[77,26],[[50,26,26],[[125,[50]]]],[[[77,[44]],31,32],[[19,[[110,[44,[77,[44]]]],25]]]],0,[[[77,[29]]],[[19,[112,25]]]],[[[77,[75]]],[[19,[113,25]]]],[[]],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],26],[[[125,[50]]],26],[77,26],[77,26],0,[[]],[[]]],"c":[],"p":[[3,"AsyncZlibDecoder"],[3,"Path"],[8,"AsRef"],[3,"LocalFileSystem"],[8,"AsyncRead"],[3,"CompressedHashedFileIn"],[8,"Sync"],[3,"String"],[8,"Into"],[8,"Send"],[8,"Future"],[3,"Box"],[3,"Pin"],[3,"Context"],[3,"ReadBuf"],[6,"Result"],[4,"Poll"],[3,"LocalHashedFileIn"],[4,"Result"],[3,"TypeId"],[8,"HashedFileIn"],[8,"Unpin"],[8,"Sized"],[8,"Message"],[4,"Error"],[15,"usize"],[8,"FileSystem"],[3,"Database"],[15,"f32"],[8,"AsSlice"],[3,"NonZeroUsize"],[8,"FnMut"],[3,"Query"],[8,"Hash"],[8,"Eq"],[3,"GetAttributeInPartition"],[8,"Clone"],[3,"PartitionQueryResult"],[3,"QueryResult"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"QueryEvent"],[8,"Scalar"],[4,"AttributeValue"],[15,"bool"],[15,"u64"],[15,"str"],[3,"AttributeValue"],[8,"VectorSet"],[8,"Partitioning"],[3,"DatabaseBuilder"],[3,"Database"],[3,"QueryResult"],[3,"PartitionQuery"],[3,"Vec"],[4,"BuildEvent"],[4,"QueryEvent"],[3,"Uuid"],[4,"Option"],[8,"PartialOrd"],[3,"NBestByKey"],[3,"PartitionIter"],[3,"Partition"],[3,"Partition"],[8,"Iterator"],[3,"DatabaseSerialize"],[3,"Database"],[8,"FileSystem"],[3,"Partition"],[3,"QueryResult"],[4,"QueryEvent"],[3,"Database"],[6,"AttributeValueRef"],[15,"u32"],[15,"slice"],[3,"BlockVectorSet"],[8,"SampleUniform"],[8,"Zero"],[8,"AddAssign"],[8,"SubAssign"],[8,"Copy"],[3,"WeightedIndex"],[8,"Rng"],[3,"PersistError"],[3,"Error"],[3,"Error"],[3,"PathPersistError"],[3,"Demand"],[3,"CompressedHashedFileOut"],[3,"LocalFileSystem"],[8,"Write"],[3,"LocalHashedFileOut"],[8,"Read"],[3,"CompressedHashedFileIn"],[8,"HashedFileOut"],[15,"u8"],[3,"LocalHashedFileIn"],[8,"HashedFileIn"],[3,"Codebook"],[4,"ClusterEvent"],[8,"Mul"],[8,"Abs"],[8,"One"],[8,"Sqrt"],[8,"Div"],[8,"PartialEq"],[8,"MulAssign"],[8,"Sub"],[3,"Partitions"],[3,"AllVectorIterator"],[3,"VectorSet"],[3,"EncodedVectorSet"],[3,"AttributesLog"],[3,"OperationSetAttribute"],[3,"Uuid"],[3,"MessageDescriptor"],[3,"FileDescriptor"],[3,"CodedInputStream"],[6,"Result"],[3,"SpecialFields"],[3,"CodedOutputStream"],[4,"Value"],[3,"OneofDescriptor"],[3,"SubVectorSet"],[3,"Partition"],[8,"LoadAttributesLog"],[8,"LoadCodebook"],[8,"LoadDatabase"],[8,"LoadPartition"],[8,"LoadPartitionCentroids"],[8,"LoadCodebook"],[8,"LoadDatabase"],[8,"LoadPartition"],[8,"LoadPartitionCentroids"],[8,"DefaultEpsilon"],[8,"TakeNBestByKey"],[8,"FromAs"],[8,"Infinity"],[8,"Deserialize"],[8,"Serialize"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
